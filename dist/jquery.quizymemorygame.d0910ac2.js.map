{"version":3,"sources":["js/jquery.quizymemorygame.js"],"names":["Array","indexOf","prototype","obj","i","length","$","initData","initOpts","methods","init","options","html","opts","gameTimer","extend","fn","quizyMemoryGame","defaults","itemsNum","children","correctItems","matches","inHtml","selItemClass","selItemId","numClicks","numTotalClicks","numMatches","numSeconds","delayShow","openDelay","w","itemWidth","h","itemHeight","m","itemsMargin","rowNum","Math","ceil","colCount","random","randomised","handleClick","setInterval","incTime","tId","attr","tdIdNum","parseInt","substring","tClass","unbindClick","showItem","showResIcon","push","clearInterval","gameSummary","textSummaryTime","textSummaryClicks","delay","fadeIn","onFinishCall","clicks","time","hideItem","setTimeout","each","myId","bindClick","animSpeed","el","unbind","css","bind","id","topId","animType","addInFullHTML","fadeOut","flip","direction","flipAnim","speed","content","color","onEnd","addInHTML","animate","height","opacity","removeInHTML","revertFlip","type","resultIcons","round","hide","ranArr","j","pick","floor","splice","inEl","eq","l","t","append","remove","xMid","width","yMid","top","left","gameEl","textSummaryTitle","replayButton","replayButtonText","closeButtonText","click","parent","destroy","empty","restart","apply","call","optionsMethods","arguments","error","jQuery"],"mappings":"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","file":"jquery.quizymemorygame.d0910ac2.js","sourceRoot":"..","sourcesContent":["// ***\n//  Memory game plugin for jQuery\n//  Author: Yane Frenski\n//  https://github.com/frenski/quizy-memorygame\n//\n//  (c) 2012-2013 http://yane.fr/\n//  MIT licensed\n// ***\n\n\n// IE hack for indexOf\nif(!Array.indexOf){\n  Array.prototype.indexOf = function(obj){\n   for(var i=0; i<this.length; i++){\n    if(this[i]==obj){\n     return i;\n    }\n   }\n   return -1;\n  }\n}\n\n\n(function($) {\n\n  var initData = ''; // Later enable to change this on the fly\n  var initOpts = {}\n\n  var methods = {\n\n      init : function(options) {\n\n        // VARIABLES **************************************************************\n        // ************************************************************************\n\n        // Keeps the record of the initial items and options\n        initData = $(this).html();\n        initOpts = options;\n\n        // gets the parameters\n        var opts = $.extend({}, $.fn.quizyMemoryGame.defaults, options);\n\n        // keeps the number of cards\n        var itemsNum = $(this).children('ul').children('li').length;\n\n        // we keep here the selected correct items (after we have a match)\n        var correctItems = new Array();\n\n        // keeps the matching ids = which elements match\n        var matches = new Array();\n\n        // keep the inner html of the elements(to hide them from web inspector, etc)\n        var inHtml = new Array();\n\n        // a selector class for the cards\n        var itemsClass = 'quizy-mg-item';\n\n        // keep the class and the id of the selected item\n        var selItemClass = '';\n        var selItemId = -1;\n\n        // keeps the number of clicks for a turn - it can be 0, 1 or 2\n        var numClicks = 0;\n\n        // keeps the number of clicks in general\n        var numTotalClicks = 0;\n\n        // keep the numer of matches and the number of seconds for the summary\n        var numMatches = 0;\n        var numSeconds = 0;\n\n        // a timer variable\n        var gameTimer;\n\n        // variables from the plugin parameters (defined and described at the end)\n        var delayShow = opts.openDelay;\n        var w = opts.itemWidth;\n        var h = opts.itemHeight;\n        var m = opts.itemsMargin;\n        var rowNum = Math.ceil(itemsNum/opts.colCount);\n        var random = opts.randomised;\n\n        // FUNCTIONS **************************************************************\n        // ************************************************************************\n\n        // A function to handle the element click\n        var handleClick = function(){\n          // starts the timer\n          if(numTotalClicks==0) gameTimer = setInterval(incTime,1000);\n          // counts the clicks\n          numTotalClicks ++;\n          // keeps the class for the clicked item\n          var tId = $(this).attr('id');\n          var tdIdNum = parseInt(tId.substring(itemsClass.length,tId.length));\n          var tClass = matches[tdIdNum];\n          // calls the unbind function (makes the button inactive)\n          unbindClick($(this));\n          showItem($(this),tdIdNum);\n          // if it's the first click out of two (turning the first card)\n          if(numClicks==0){\n            numClicks ++ ;\n            selItemClass = tClass;\n            selItemId = tId;\n          // if it's the second click out of two (turning the second card)\n          }else if(numClicks == 1){\n            numClicks = 0;\n            // if both have the same class = we HAVE a match\n            if(tClass == selItemClass){\n              showResIcon('correct');\n              unbindClick($('.'+tClass));\n              // Adds the turned cards to the correct items array\n              correctItems.push(tId);\n              correctItems.push(selItemId);\n              //increases the number of correct matches\n              numMatches ++ ;\n              // If all of the cards are turned and the game is complete\n              if(numMatches == itemsNum/2){\n                // removes the timer\n                clearInterval(gameTimer);\n                // if game summary is set, adds the info to it and shows it.\n                if(opts.gameSummary){\n                  $('div#quizy-game-summary').\n                      children('div#gs-column2').\n                      html(numSeconds+'<br>'+opts.textSummaryTime);\n                  $('div#quizy-game-summary').\n                      children('div#gs-column3').\n                      html(numTotalClicks+'<br>'+opts.textSummaryClicks);\n                  $('div#quizy-game-summary').delay(2000).fadeIn(1000);\n                }\n                // if is set makes an AJAX call and sends the the necessary params\n                if(opts.onFinishCall!=''){\n                  opts.onFinishCall({ clicks: numTotalClicks, time: numSeconds } );\n                }\n              }\n            // if they dont have the same class = WE DON'T HAVE a match\n            }else{\n              showResIcon('wrong');\n              unbindClick($('div.'+itemsClass));\n              // turns the cards back\n              hideItem($('div#'+selItemId));\n              hideItem($(this));\n              // after a certain time adds back the click event to the card\n              setTimeout( function(){\n                $('.'+itemsClass).each(function(){\n                  var myId = $(this).attr('id');\n                  if(correctItems.indexOf(myId) == -1){\n                    bindClick($(this));\n                  }\n                });\n              }, delayShow+opts.animSpeed+250);\n            }\n          }\n        }\n\n        //removes a click from an element\n        var unbindClick = function(el){\n          el.unbind('click');\n          el.css('cursor','default');\n        }\n\n        // adds a click to an element\n        var bindClick = function(el){\n          el.bind('click',handleClick);\n          el.css('cursor','pointer');\n        }\n\n        // shows item with different animation/based on settings\n        var showItem = function(el,id){\n          var topId = el.children('div.quizy-mg-item-top').attr('id');\n          switch(opts.animType){\n            default:\n            case 'fade':\n              addInFullHTML(el,id);\n              $('#'+topId).fadeOut(opts.animSpeed);\n            break;\n            case 'flip':\n              el.flip({\n                direction:opts.flipAnim,\n                speed: opts.animSpeed,\n                content: el.children('div.quizy-mg-item-bottom'),\n                color:'#777',\n                onEnd: function(){\n                  addInHTML(el,id);\n                }\n              });\n            break;\n            case 'scroll':\n              addInFullHTML(el,id);\n              $('#'+topId).animate({height: 'toggle', opacity:0.3},opts.animSpeed);\n            break;\n          }\n        }\n\n        // hides item with different animation/based on settings\n        var hideItem = function(el){\n          var topId = el.children('div.quizy-mg-item-top').attr('id');\n          switch(opts.animType){\n            default:\n            case 'fade':\n              $('#'+topId).delay(delayShow).fadeIn(opts.animSpeed, function(){\n                removeInHTML(el);\n              });\n            break;\n            case 'flip':\n              setTimeout( function(){\n               el.revertFlip();\n              }, delayShow);\n              setTimeout( function(){\n               removeInHTML(el);\n              }, delayShow+opts.animSpeed*4);\n            break;\n            case 'scroll':\n              $('#'+topId).delay(delayShow).\n                          animate({height: 'toggle', opacity:1},opts.animSpeed,\n                          function(){\n                            removeInHTML(el);\n                          });\n            break;\n          }\n        }\n\n        //shows and hids the correct/wrong message after an action\n        var showResIcon = function(type){\n          if(opts.resultIcons){\n            var el;\n            var time = Math.round(delayShow/3);\n            if(type=='wrong'){\n              el = $('div#quizy-mg-msgwrong');\n            }else if(type=='correct'){\n              el = $('div#quizy-mg-msgcorrect');\n            }\n            el.delay(time).fadeIn(time/2).delay(time/2).hide(\"explode\", time/2);\n          }\n        }\n\n        // time functions\n        var incTime = function(){\n          numSeconds ++;\n        }\n\n        // function for adding the inner HTMK\n        var addInFullHTML = function(el,id){\n          el.children('.quizy-mg-item-bottom')\n            .children('.mgcard-show')\n            .html(inHtml[id]);\n        }\n\n        var addInHTML = function(el,id){\n          el.children('.mgcard-show')\n            .html(inHtml[id]);\n        }\n\n        var removeInHTML = function(el){\n          el.children('.quizy-mg-item-bottom').children('.mgcard-show').html('');\n        }\n\n        // MAIN INIT **************************************************************\n        // ************************************************************************\n        // hides the <li> items\n        $(this).children('ul').hide();\n\n        // makes the div wrapper big enough\n        $(this).css({height:rowNum*(h+m)+'px'});\n\n        // creates an array for randomising the items (if randomised is true)\n        // and creates an empty inner html array\n\t\t\t\tif(random){\n\t\t\t\t\tvar ranArr = Array();\n\t        for(var j=0; j< itemsNum; j++){\n\t          inHtml[j] = '';\n\t          ranArr.push(j);\n\t        }\n\t\t\t\t}\n\n        // Generates all the elements, based on the data in the <li> elements\n\t\t\t\tvar j=0;\n        var i=0;\n        while(i<itemsNum){\n\n          // randozises the card - picks an item with a random key and\n          // removes it from the random array (if randomised is true)\n\t\t\t\t\tif(random){\n          \tvar pick = Math.floor(Math.random()*ranArr.length);\n          \tj = ranArr[pick];\n          \tranArr.splice(pick,1);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tj = i;\n\t\t\t\t\t}\n\n          // gets the data from each <li> element\n          var inEl = $(this).children('ul').children('li').eq(j);\n\n          // calculates the position of each element\n          var xRatio = (i+opts.colCount)%opts.colCount;\n          var yRatio = Math.floor(i/opts.colCount);\n          var l = xRatio*(w+m);\n          var t = yRatio*(h+m);\n\n          // Adds the innerHtml to the array\n          inHtml[j] = inEl.html();\n\n          // appends the cards to the element\n          $(this).append('<div id=\"'+itemsClass+j+'\" class=\"'+itemsClass+\n          '\" style=\"width:'+\n          w+'px; height:'+h+'px; left:'+l+'px; top:'+t+'px\">' +\n          '<div class=\"quizy-mg-item-bottom\"><div class=\"mgcard-show\">'+\n          '</div></div><div id=\"quizy-mg-item-top'+j+\n          '\" class=\"quizy-mg-item-top\" style=\"width:'+\n          w+'px; height:'+h+'px;\"></div></div>');\n          i++;\n\n          // Adds the element match id to the array of matches\n          matches[j] = inEl.attr('class');\n\n        }\n\n        // removes the initial <li> elements\n        $(this).children('ul').remove();\n\n        // adds the icons for the result after each match\n        if(opts.resultIcons){\n          $(this).append('<div id=\"quizy-mg-msgwrong\"'+\n          ' class=\"quizy-mg-notification-fly quizy-mg-notification-fly-neg\"></div>'+\n          '<div id=\"quizy-mg-msgcorrect\" class=\"quizy-mg-notification-fly '+\n          ' quizy-mg-notification-fly-pos\"></div>');\n          // positions the result icons in the middle of the div wrapper\n          var xMid = $(this).width()/2 -\n                      $('div.quizy-mg-notification-fly').width()/2;\n          var yMid = $(this).height()/2 -\n                      $('div.quizy-mg-notification-fly').height()/2 -\n                      opts.itemsMargin/2;\n          $('div.quizy-mg-notification-fly').css({top:yMid+'px',left:xMid+'px'});\n        }\n\n        // Appends game summary div if set in the opts.\n        if(opts.gameSummary){\n\n          var gameEl = $(this);\n\n          gameEl.append('<div id=\"quizy-game-summary\"><div class=\"gs-column\" id=\"gs-column1\">'+\n                          opts.textSummaryTitle+\n                          '</div><div class=\"gs-column\" id=\"gs-column2\"></div>'+\n                          '<div class=\"gs-column\" id=\"gs-column3\"></div>'+\n                          '<div class=\"quizy-game-clear\"></div></div>');\n          // positions the summary div in the middle of the div wrapper\n          var xMid = gameEl.width()/2 -\n                      $('div#quizy-game-summary').width()/2;\n          var yMid = gameEl.height()/2 -\n                      $('div#quizy-game-summary').height()/2 -\n                      opts.itemsMargin/2;\n          $('div#quizy-game-summary').css({top:yMid+'px',left:xMid+'px'});\n\n          // Appends replay but if set in the opts.\n          if(opts.replayButton){\n            $('#quizy-game-summary').append('<div id=\"gs-replaybut\">'+\n                                            opts.replayButtonText+'</div>');\n          }\n\n          // Appends the close button\n          $('#quizy-game-summary').append('<div id=\"gs-closebut\">'+\n                                          opts.closeButtonText+'</div>');\n\n          // adds a click event to the close button to be removed on click\n          $('div#gs-closebut').click(function(){\n            $(this).parent().fadeOut();\n          });\n\n          // adds a click event to the replay button\n          $('div#gs-replaybut').click(function(){\n            gameEl.quizyMemoryGame('restart');\n          });\n\n        }\n\n\n        // adds the click event to each element\n        $('.quizy-mg-item').click(handleClick);\n\n\n      },\n\n      destroy : function( ) {\n        $(this).empty();\n      },\n\n      restart: function( ){\n        methods.destroy.apply( this );\n        $(this).append(initData);\n        methods.init.call( this, initOpts );\n      }\n\n  };\n\n\n  $.fn.quizyMemoryGame = function(optionsMethods) {\n\n    if ( methods[optionsMethods] ) {\n        return methods[ optionsMethods ].apply( this, arguments);\n    } else if ( typeof optionsMethods === 'object' || ! optionsMethods ) {\n        return methods.init.apply( this, arguments );\n    } else {\n        $.error( 'Method ' +  optionsMethods + ' does not exist on jQuery.tooltip' );\n    }\n\n  }\n\n  /**** plugin parameters *****************************************************\n  *****************************************************************************\n\n    * itemWidth:         The width of the card in pixels.\n    * itemHeight:        The width of the card in pixels.\n                         Don't forget to change the style of the element in\n                         the CSS if you change one of this two paremeters\n    * itemsMargin:       The right and bottom margin of the element defining\n                         the margin between the cards.\n    * colCount:          In how many columns the plugin should arrange the cards\n    * animType:          The type of animation used when a card is clicked.\n                         Can be 'flip', 'fade' and 'scroll'.\n    * flipAnim:          The direction of the flip animation, if chosen in the\n                         previous property.Possible values: 'tb', 'bt', 'lr', 'rl'\n    * animSpeed:         How fast the card turning animation should be (in ms)\n    * openDelay:         For how long the card should stay turned (in ms)\n    * resultIcons:       After turning each to pairs the plugin shows an icon\n                         if it was correct or not. Can be true or false\n    * gameSummary:       At the end of the game the plugin shows a short game\n                         summary - how many clicks the user has done and how\n                         much time it took to complete the game.\n                         Can be true or false\n    * textSummaryTitle:  The title of the summary text at the end of the game\n    * textSummaryClicks: The same as the previous but used for the text\n                         indicating the clicks done.\n    * textSummaryTime:   The same as the previous but used for the text\n                         indicating the time to complete.\n    * replayButton:      At the end of the game the at the bottom of the summary\n                         popup a replay button can be shown\n                         Can be true or false\n    * replayButtonText:  The text to appear on the replay button\n    * closeButtonText:   The text to appear on the close button\n    * onFinishCall:      The call back function\n                         It sends two arguments: clicks and time.\n\n    ***** METHODS ************************************************************\n\n    * init:             initializes the plug\n    * destroy:          destroys the plug\n    * reset:            resets the game\n\n  ****************************************************************************/\n\n  $.fn.quizyMemoryGame.defaults = {itemWidth: 156, itemHeight: 156, itemsMargin:10, colCount:4, animType:'scroll', animSpeed:250, openDelay:2500, flipAnim:'rl', resultIcons:true, gameSummary:true, randomised:true, textSummaryTitle:'Your game summary', replayButton:true, replayButtonText:'Replay', closeButtonText:'Close', textSummaryClicks:'clicks', textSummaryTime:'seconds', onFinishCall:''}\n\n\n})(jQuery);\n"]}